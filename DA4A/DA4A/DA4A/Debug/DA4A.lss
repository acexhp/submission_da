
DA4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075e  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000682  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d6  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000387  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001697  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001727  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int main(void)
{
	
	
	PORTC |=(1<<2);				//pull-up resistor
  90:	42 9a       	sbi	0x08, 2	; 8
	OCR0A = 200;				//setting top = 200, frequency
  92:	88 ec       	ldi	r24, 0xC8	; 200
  94:	87 bd       	out	0x27, r24	; 39
	
	//sets timer/counter control register, mode 7, fast PWM and prescaler is 256
	TCCR0A |= (1<<COM0A1)|(0<<COM0A0)|(1<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(1<<WGM00);
  96:	84 b5       	in	r24, 0x24	; 36
  98:	83 6a       	ori	r24, 0xA3	; 163
  9a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02)|(1<<CS02)|(0<<CS01)|(0<<CS00);
  9c:	85 b5       	in	r24, 0x25	; 37
  9e:	8c 60       	ori	r24, 0x0C	; 12
  a0:	85 bd       	out	0x25, r24	; 37
		{
			if(!SWITCH)
			{
				_delay_ms(100);
				
				ADCSRA |= ((1<<ADEN)|(1<<ADSC)|(0<<ADPS2)|(0<<ADPS1)|(1<<ADPS0));
  a2:	aa e7       	ldi	r26, 0x7A	; 122
  a4:	b0 e0       	ldi	r27, 0x00	; 0
				ADMUX |= (1<<REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
				
				{
					OCR0B = ADC;   //value being read from potentiometer, sets duty cycle
  aa:	c8 e7       	ldi	r28, 0x78	; 120
  ac:	d0 e0       	ldi	r29, 0x00	; 0
					DDRD = 0xFF;   //output
  ae:	5f ef       	ldi	r21, 0xFF	; 255
					PORTD = 0x20;  //sets PD5 HIGH
  b0:	40 e2       	ldi	r20, 0x20	; 32
					DCMotor=1;	   // setting motor to 1 to get out of while loop
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	1a c0       	rjmp	.+52     	; 0xec <main+0x5c>
	while (1)
	{
		//Checks if the button is pressed while motor is off
		while (!DCMotor)
		{
			if(!SWITCH)
  b8:	33 99       	sbic	0x06, 3	; 6
  ba:	18 c0       	rjmp	.+48     	; 0xec <main+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	6f ef       	ldi	r22, 0xFF	; 255
  be:	81 ee       	ldi	r24, 0xE1	; 225
  c0:	94 e0       	ldi	r25, 0x04	; 4
  c2:	61 50       	subi	r22, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x32>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3c>
  cc:	00 00       	nop
			{
				_delay_ms(100);
				
				ADCSRA |= ((1<<ADEN)|(1<<ADSC)|(0<<ADPS2)|(0<<ADPS1)|(1<<ADPS0));
  ce:	8c 91       	ld	r24, X
  d0:	81 6c       	ori	r24, 0xC1	; 193
  d2:	8c 93       	st	X, r24
				ADMUX |= (1<<REFS0);
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
				
				{
					OCR0B = ADC;   //value being read from potentiometer, sets duty cycle
  da:	88 81       	ld	r24, Y
  dc:	99 81       	ldd	r25, Y+1	; 0x01
  de:	88 bd       	out	0x28, r24	; 40
					DDRD = 0xFF;   //output
  e0:	5a b9       	out	0x0a, r21	; 10
					PORTD = 0x20;  //sets PD5 HIGH
  e2:	4b b9       	out	0x0b, r20	; 11
					DCMotor=1;	   // setting motor to 1 to get out of while loop
  e4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
  e8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	TCCR0B |= (1<<WGM02)|(1<<CS02)|(0<<CS01)|(0<<CS00);
	
	while (1)
	{
		//Checks if the button is pressed while motor is off
		while (!DCMotor)
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f4:	89 2b       	or	r24, r25
  f6:	01 f3       	breq	.-64     	; 0xb8 <main+0x28>
  f8:	11 c0       	rjmp	.+34     	; 0x11c <main+0x8c>
		}
		
		//Checks if the button is pressed while motor is on
		while (DCMotor)
		{
			if(!SWITCH)
  fa:	33 99       	sbic	0x06, 3	; 6
  fc:	13 c0       	rjmp	.+38     	; 0x124 <main+0x94>
  fe:	6f ef       	ldi	r22, 0xFF	; 255
 100:	81 ee       	ldi	r24, 0xE1	; 225
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	61 50       	subi	r22, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x74>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x7e>
 10e:	00 00       	nop
			{
				_delay_ms(100);
				
				// Turns off the motor and let it run CW
				PORTD &= ~(1<<5);
 110:	5d 98       	cbi	0x0b, 5	; 11
				DDRD = 0;
 112:	1a b8       	out	0x0a, r1	; 10
				DCMotor=0;
 114:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 118:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				}
			}
		}
		
		//Checks if the button is pressed while motor is on
		while (DCMotor)
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 124:	00 97       	sbiw	r24, 0x00	; 0
 126:	49 f7       	brne	.-46     	; 0xfa <main+0x6a>
 128:	e1 cf       	rjmp	.-62     	; 0xec <main+0x5c>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
