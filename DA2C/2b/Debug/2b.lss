
2b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000162  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a5  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000624  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000248  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000339  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000002f  00000000  00000000  00001489  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int overflow = 0;					//initialize overflow

int main(void)
{
	DDRB |= (1 << DDB2);				//PB2 as output
  90:	22 9a       	sbi	0x04, 2	; 4
	TIMSK0 |= (1 << TOIE0);			//enables interrupt
  92:	ee e6       	ldi	r30, 0x6E	; 110
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	TCNT0 = 0;					//start counter
  9c:	16 bc       	out	0x26, r1	; 38
	sei();						//enables interrupt
  9e:	78 94       	sei
	TCCR0B = (1 << CS02) | (1 << CS00);	//pre-scaler = 1024
  a0:	85 e0       	ldi	r24, 0x05	; 5
  a2:	85 bd       	out	0x25, r24	; 37
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <main+0x14>

000000a6 <__vector_16>:
		
	}
}

ISR (TIMER0_OVF_vect)				//timer0 overflow interrupt
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
			TCNT0 = 0;
		}
		
		while ((TIFR0 & 0x01) == 0);//detects overflow
		TCNT0 = 0x00;			//resets counter
		TIFR0 = 0x01;			//reset overflow flag
  b0:	21 e0       	ldi	r18, 0x01	; 1
		overflow++;			//inc overflow
		if (overflow <= 69)		//led turns on
		PORTB = (0 << DDB2);
		else PORTB = (1 << DDB2);	//led off
  b2:	34 e0       	ldi	r19, 0x04	; 4
}

ISR (TIMER0_OVF_vect)				//timer0 overflow interrupt
{
while (1) {
		if (!(PINC & (1<<PINC1)))
  b4:	31 99       	sbic	0x06, 1	; 6
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <__vector_16+0x1c>
		{
			overflow = 0;
  b8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  bc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			TCNT0 = 0;
  c0:	16 bc       	out	0x26, r1	; 38
		}
		
		while ((TIFR0 & 0x01) == 0);//detects overflow
  c2:	a8 9b       	sbis	0x15, 0	; 21
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <__vector_16+0x1c>
		TCNT0 = 0x00;			//resets counter
  c6:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x01;			//reset overflow flag
  c8:	25 bb       	out	0x15, r18	; 21
		overflow++;			//inc overflow
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if (overflow <= 69)		//led turns on
  dc:	86 34       	cpi	r24, 0x46	; 70
  de:	91 05       	cpc	r25, r1
  e0:	14 f4       	brge	.+4      	; 0xe6 <__vector_16+0x40>
		PORTB = (0 << DDB2);
  e2:	15 b8       	out	0x05, r1	; 5
  e4:	e7 cf       	rjmp	.-50     	; 0xb4 <__vector_16+0xe>
		else PORTB = (1 << DDB2);	//led off
  e6:	35 b9       	out	0x05, r19	; 5
  e8:	e5 cf       	rjmp	.-54     	; 0xb4 <__vector_16+0xe>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
