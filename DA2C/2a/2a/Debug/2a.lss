
2a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000176  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a4  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023c  00000000  00000000  00000ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033c  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000014e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int overflow = 0;						//initialize overflow

int main(void)
{
	DDRB |= (1 << DDB2);				//PB2 as output
  90:	22 9a       	sbi	0x04, 2	; 4
	TIMSK0 |= (1 << TOIE0);				//enables interrupt
  92:	ee e6       	ldi	r30, 0x6E	; 110
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	TCNT0 = 0;							//start counter
  9c:	16 bc       	out	0x26, r1	; 38
	sei();								//enables interrupt
  9e:	78 94       	sei
	TCCR0B = (1 << CS02) | (1 << CS00);	//pre-scaler = 1024
  a0:	85 e0       	ldi	r24, 0x05	; 5
  a2:	85 bd       	out	0x25, r24	; 37
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <main+0x14>

000000a6 <__vector_16>:
		
	}
}

ISR (TIMER0_OVF_vect)					//timer0 overflow interrupt
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
		while ((TIFR0 & 0x01) == 0);	//detects overflow
  b4:	a8 9b       	sbis	0x15, 0	; 21
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <__vector_16+0xe>
		TCNT0 = 0x00;					//resets counter
  b8:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x01;					//reset overflow flag
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	85 bb       	out	0x15, r24	; 21
		overflow++;						//inc overflow
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if (overflow <= 13)				//led on (13 instead of 26 because...
  d0:	0e 97       	sbiw	r24, 0x0e	; 14
  d2:	14 f4       	brge	.+4      	; 0xd8 <__vector_16+0x32>
		PORTB = (0 << DDB2);			//... overflow is being doubled)
  d4:	15 b8       	out	0x05, r1	; 5
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__vector_16+0x36>
		else PORTB = (1 << DDB2);		
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	85 b9       	out	0x05, r24	; 5
		if (overflow == 22) {
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e4:	46 97       	sbiw	r24, 0x16	; 22
  e6:	21 f4       	brne	.+8      	; 0xf0 <__vector_16+0x4a>
			overflow = 0;				//turns off led
  e8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
