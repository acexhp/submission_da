
1a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068b  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000605  00000000  00000000  00000827  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000330  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include<util/delay.h>

int main()
{
	int overflow = 0;					//initialize overflow
    DDRB |= (1 << DDB2);				//PB2 as output
  80:	22 9a       	sbi	0x04, 2	; 4
	TCCR0A = 0;
  82:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 0x00;						//start timer
  84:	16 bc       	out	0x26, r1	; 38
	TCCR0B = (1 << CS02) | (1 << CS00);	//pre-scaler = 1024
  86:	85 e0       	ldi	r24, 0x05	; 5
  88:	85 bd       	out	0x25, r24	; 37
#include <avr/io.h>
#include<util/delay.h>

int main()
{
	int overflow = 0;					//initialize overflow
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0

	
	while (1){
		while ((TIFR0 & 0x01) == 0);	//detects overflow
		TCNT0 = 0x00;					//resets counter
		TIFR0 = 0x01;					//reset overflow flag
  8e:	21 e0       	ldi	r18, 0x01	; 1
		overflow++;						//inc overflow
		if (overflow <= 26)				//led on
			PORTB = (0 << DDB2);		
			else PORTB = (1 << DDB2);
  90:	34 e0       	ldi	r19, 0x04	; 4
	TCNT0 = 0x00;						//start timer
	TCCR0B = (1 << CS02) | (1 << CS00);	//pre-scaler = 1024

	
	while (1){
		while ((TIFR0 & 0x01) == 0);	//detects overflow
  92:	a8 9b       	sbis	0x15, 0	; 21
  94:	fe cf       	rjmp	.-4      	; 0x92 <main+0x12>
		TCNT0 = 0x00;					//resets counter
  96:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x01;					//reset overflow flag
  98:	25 bb       	out	0x15, r18	; 21
		overflow++;						//inc overflow
  9a:	01 96       	adiw	r24, 0x01	; 1
		if (overflow <= 26)				//led on
  9c:	8b 31       	cpi	r24, 0x1B	; 27
  9e:	91 05       	cpc	r25, r1
  a0:	14 f4       	brge	.+4      	; 0xa6 <main+0x26>
			PORTB = (0 << DDB2);		
  a2:	15 b8       	out	0x05, r1	; 5
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <main+0x28>
			else PORTB = (1 << DDB2);
  a6:	35 b9       	out	0x05, r19	; 5
		if (overflow == 44) {
  a8:	8c 32       	cpi	r24, 0x2C	; 44
  aa:	91 05       	cpc	r25, r1
  ac:	91 f7       	brne	.-28     	; 0x92 <main+0x12>
			overflow = 0;				//turns off led		
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ef cf       	rjmp	.-34     	; 0x92 <main+0x12>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
